name: "Terraform Validate & Dryrun"

on:
  workflow_dispatch:

  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev", "UAT-QA"]

permissions:
  contents: read

env:
  TERRAFORM_DESTROY: "YES"
  ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
  ACTIONS_STEP_DEBUG: true

jobs:
  secret-scanning:
    name: "secret-scanning-job"
    #runs-on: ubuntu-latest
    runs-on: terraform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v3
      - uses: max/secret-scan@master

  terraform:
    name: "Terraform-job"
    #runs-on: ubuntu-latest
    runs-on: terraform
    needs: secret-scanning

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      #Download Terraform Version 1.5.5
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        timeout-minutes: 1

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt  && terraform validate
        timeout-minutes: 1

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan --var-file terraform.tfvars -input=false
        timeout-minutes: 2
